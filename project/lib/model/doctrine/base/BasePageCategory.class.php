<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PageCategory', 'doctrine');

/**
 * BasePageCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property Doctrine_Collection $Page
 * 
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method Doctrine_Collection getPage()        Returns the current record's "Page" collection
 * @method PageCategory        setName()        Sets the current record's "name" value
 * @method PageCategory        setDescription() Sets the current record's "description" value
 * @method PageCategory        setPage()        Sets the current record's "Page" collection
 * 
 * @package    lufy
 * @subpackage model
 * @author     Guillaume Marsay - Futurolan <guillaume@futurolan.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePageCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('page_category');
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Page', array(
             'local' => 'id',
             'foreign' => 'page_category_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnsName' => 'root_id',
             ));
        $this->actAs($nestedset0);
    }
}