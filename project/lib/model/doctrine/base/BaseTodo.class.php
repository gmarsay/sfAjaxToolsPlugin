<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Todo', 'doctrine');

/**
 * BaseTodo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property enum $priority
 * @property enum $achieved
 * @property enum $is_private
 * @property enum $is_active
 * @property integer $todo_parent_id
 * @property integer $todo_group_id
 * @property Todo $Todo
 * @property TodoGroup $TodoGroup
 * @property Doctrine_Collection $TodoOwner
 * @property Doctrine_Collection $TodoComment
 * 
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getDescription()    Returns the current record's "description" value
 * @method enum                getPriority()       Returns the current record's "priority" value
 * @method enum                getAchieved()       Returns the current record's "achieved" value
 * @method enum                getIsPrivate()      Returns the current record's "is_private" value
 * @method enum                getIsActive()       Returns the current record's "is_active" value
 * @method integer             getTodoParentId()   Returns the current record's "todo_parent_id" value
 * @method integer             getTodoGroupId()    Returns the current record's "todo_group_id" value
 * @method Todo                getTodo()           Returns the current record's "Todo" value
 * @method TodoGroup           getTodoGroup()      Returns the current record's "TodoGroup" value
 * @method Doctrine_Collection getTodoOwner()      Returns the current record's "TodoOwner" collection
 * @method Doctrine_Collection getTodoComment()    Returns the current record's "TodoComment" collection
 * @method Todo                setName()           Sets the current record's "name" value
 * @method Todo                setDescription()    Sets the current record's "description" value
 * @method Todo                setPriority()       Sets the current record's "priority" value
 * @method Todo                setAchieved()       Sets the current record's "achieved" value
 * @method Todo                setIsPrivate()      Sets the current record's "is_private" value
 * @method Todo                setIsActive()       Sets the current record's "is_active" value
 * @method Todo                setTodoParentId()   Sets the current record's "todo_parent_id" value
 * @method Todo                setTodoGroupId()    Sets the current record's "todo_group_id" value
 * @method Todo                setTodo()           Sets the current record's "Todo" value
 * @method Todo                setTodoGroup()      Sets the current record's "TodoGroup" value
 * @method Todo                setTodoOwner()      Sets the current record's "TodoOwner" collection
 * @method Todo                setTodoComment()    Sets the current record's "TodoComment" collection
 * 
 * @package    lufy
 * @subpackage model
 * @author     Guillaume Marsay - Futurolan <guillaume@futurolan.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTodo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('todo');
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '',
             ));
        $this->hasColumn('priority', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'low',
              1 => 'normal',
              2 => 'hight',
             ),
             'default' => 'normal',
             ));
        $this->hasColumn('achieved', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 0,
              1 => 10,
              2 => 20,
              3 => 30,
              4 => 40,
              5 => 50,
              6 => 60,
              7 => 70,
              8 => 80,
              9 => 90,
              10 => 100,
             ),
             'default' => 0,
             ));
        $this->hasColumn('is_private', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'default' => 'no',
             ));
        $this->hasColumn('is_active', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'yes',
              1 => 'no',
              2 => 'archived',
             ),
             'default' => 'yes',
             ));
        $this->hasColumn('todo_parent_id', 'integer', 8, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 8,
             ));
        $this->hasColumn('todo_group_id', 'integer', 8, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Todo', array(
             'local' => 'id',
             'foreign' => 'todo_parent_id'));

        $this->hasOne('TodoGroup', array(
             'local' => 'todo_group_id',
             'foreign' => 'id'));

        $this->hasMany('TodoOwner', array(
             'local' => 'id',
             'foreign' => 'todo_id'));

        $this->hasMany('TodoComment', array(
             'local' => 'id',
             'foreign' => 'todo_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}